
Goal: Construct a data set that relates Last.fm tags to each other, revealing 
which genres (and other tags) are most associated.  Define score for similarity
between tags, output a text file with related tags and their score descending. 
In addition, output transitional data sets, specifically relevant tags per artist.

Resources:
	• API details: http://www.last.fm/api/intro
	• Top Artists method: http://www.last.fm/api/show/chart.getTopArtists
	• Top Tags method: http://www.last.fm/api/show/artist.getTopTags
	• To get started with last fm api I used: http://snipplr.com/view/63161/


Steps:
	1. Define a database schema where store, artists, tags, and their relations
			--> Why i chose this schema?
			-  I have been working on a project (see www.mixdemon.com) in which i am attempting
			-  to generate analytics on underground house and techno artists in order to create
		  -  a content based filtering recommendation algorithm. That is, i'm interested in using
		  -  metadata as opposed to user behavior to tag tracks and recommend them to my users.
		  -  I'm currently using soundcloud, freebase, and Resident Advisor (shhhh.. i crawled their site)
		  -  and tring to create one resource in which all of this metadata is combined.  Last fm
		  -  is actually one of the resources that i want to use, but as of last have not had the
		  -  time to work with.  The schema i use in mix demon (https://github.com/Adusei/mix_daemon/blob/master/app/db.py)
		  -  is similar to what you see here.. that is because hopefully i will add last fm as a source
		  -  and be able to use some of this code.

		  -  Also im a SQL Server database professional by trade, and i think in terms of relational databases
		  -  very naturally, so this was an easy choice for me in how i chose to store the data.
	2.  Define two classes, a last FM task which inherits from a DB task
			-  The DB task deals with all connections and interaction with the databae.
			-  The last fm class inherits all of the database methods and calls them in order to insert and retreive data
	3. Find Relevant Artists for a Particular Genere
			-- > I chose minimal techno, which is had 999 artists... a nice number :D
			-  The top level Method in my code is called get_artists_by_genre()
					- get artists - add them to the DB
					- for each artist get their tags
					- add tags to db if it does not exists
					- create a record in artist_to_tags to represent this relation
		  - at this point the transitional data is accessable. 
	4.  Write a Query to determine how closely related each tag is.
			- join the artist to tags table on itself to find how often two tags co-occur for an artist
			- group by both tag IDs ( one from each time we join the table)
			- only show me tags that appear more than 10 times together ( for the sake of the resulting txt file )
			- return the score as the sum of the tag pct counts of the two tags
				  - > this not only gives me a feeling for how many times two tags appear together
				  - > it also quantifies, for each co-occurance, how relevant each of those tags was to the artist.
			- get the tag names by joining the tags table on the above results
	5.  Write the related tags and their z-score to a file
			- the score that we got from the above query isnt super helpful in understanding how strong the relationship between two ags is... z-score gives us a more relevant metric.
					- > a negative score means that the score was below the mean, positive means it is above the mean
					- > a score of 1.00 means that the tags were 1 standard deviation above the mean ( vise versa for -1.00 )


Where I would go from here.
	1.  Tune performance.  This code is pretty slow... if this was production code i would use redis
			and create a dictionary for each tag, where the tag was the key, and the value was another
			dictionary where the key was the tag, and the value cooresponding score.. for example:
			[minimal techno] = { [techno] = .907, [electronica] = .824, [deep house] = .726 } etc.




